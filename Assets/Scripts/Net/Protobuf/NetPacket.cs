// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net-packet.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from net-packet.proto</summary>
  public static partial class NetPacketReflection {

    #region Descriptor
    /// <summary>File descriptor for net-packet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetPacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBuZXQtcGFja2V0LnByb3RvEgJwYiJWCghIZWFkUGFjaxIhCgpwcm90b190",
            "eXBlGAEgASgOMg0ucGIuUHJvdG9UeXBlEgsKA3BpZBgCIAEoDRIMCgR0eXBl",
            "GAMgASgNEgwKBGNvZGUYBCABKA0qaQoJUHJvdG9UeXBlEhYKElBST1RPX1RZ",
            "UEVfVU5LTk9XThAAEhYKElBST1RPX1RZUEVfUkVRVUVTVBABEhcKE1BST1RP",
            "X1RZUEVfUkVTUE9OU0UQAhITCg9QUk9UT19UWVBFX1BVU0gQA0INWgtpbXN5",
            "c3RlbS9wYmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Pb.ProtoType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.HeadPack), global::Pb.HeadPack.Parser, new[]{ "ProtoType", "Pid", "Type", "Code" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///协议类型
  /// </summary>
  public enum ProtoType {
    [pbr::OriginalName("PROTO_TYPE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("PROTO_TYPE_REQUEST")] Request = 1,
    [pbr::OriginalName("PROTO_TYPE_RESPONSE")] Response = 2,
    [pbr::OriginalName("PROTO_TYPE_PUSH")] Push = 3,
  }

  #endregion

  #region Messages
  public sealed partial class HeadPack : pb::IMessage<HeadPack> {
    private static readonly pb::MessageParser<HeadPack> _parser = new pb::MessageParser<HeadPack>(() => new HeadPack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeadPack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.NetPacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadPack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadPack(HeadPack other) : this() {
      protoType_ = other.protoType_;
      pid_ = other.pid_;
      type_ = other.type_;
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeadPack Clone() {
      return new HeadPack(this);
    }

    /// <summary>Field number for the "proto_type" field.</summary>
    public const int ProtoTypeFieldNumber = 1;
    private global::Pb.ProtoType protoType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.ProtoType ProtoType {
      get { return protoType_; }
      set {
        protoType_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private uint pid_;
    /// <summary>
    ///消息唯一id(请求、响应才会有)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private uint type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 4;
    private uint code_;
    /// <summary>
    ///响应才会有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeadPack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeadPack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProtoType != other.ProtoType) return false;
      if (Pid != other.Pid) return false;
      if (Type != other.Type) return false;
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProtoType != 0) hash ^= ProtoType.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProtoType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ProtoType);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pid);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Type);
      }
      if (Code != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProtoType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtoType);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pid);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeadPack other) {
      if (other == null) {
        return;
      }
      if (other.ProtoType != 0) {
        ProtoType = other.ProtoType;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            protoType_ = (global::Pb.ProtoType) input.ReadEnum();
            break;
          }
          case 16: {
            Pid = input.ReadUInt32();
            break;
          }
          case 24: {
            Type = input.ReadUInt32();
            break;
          }
          case 32: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
